'use strict';

const fs = require('fs');
const path = require('path');
const express = require('express');
const favicon = require('serve-favicon');
const compression = require('compression');
const serialize = require('serialize-javascript');
const resolve = file => path.resolve(__dirname, file);
const config = require('config');

const isDevelop = process.env.NODE_ENV === 'develop';
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`;

const app = express();

// 确保日志目录存在logs
(() => {
  try {
    fs.mkdirSync(path.resolve(__dirname, 'logs'));
  } catch (err) {
    console.log('cannot create logs folder:', err.code);
  }
})();

let indexHTML; // generated by html-webpack-plugin
let renderer;  // created from the webpack-generated server bundle
if (!isDevelop) {
  // in production: create server renderer and index HTML from real fs
  renderer = createRenderer(fs.readFileSync(resolve('./dist/server-bundle.js'), 'utf-8'));
  indexHTML = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'));
} else {
  // in development: setup the dev server with watch and hot-reload,
  // and update renderer / index HTML on file change.
  require('./build/setup-dev-server')(app, {
    bundleUpdated: bundle => {
      renderer = createRenderer(bundle);
    },
    indexUpdated: index => {
      indexHTML = parseIndex(index);
    }
  });
}

function createRenderer(bundle) {
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  });
}

function parseIndex(template) {
  const contentMarker = '<!-- APP -->';
  const i = template.indexOf(contentMarker);
  return {
    head: template.slice(0, i),
    tail: template.slice(i + contentMarker.length)
  };
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isDevelop ? 60 * 60 * 24 * 30 : 0
});

app.use(compression({ threshold: 0 }));
app.use(favicon(resolve('favicon.ico')));
app.use('/dist', serve('./dist'));
app.use('/', serve('./public'));

const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');

app.use(cookieParser(config.cookie));
app.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));
app.use(bodyParser.json({ limit: '50mb' }));

app.use(function(req, res, next) {
  const token = req.cookies[config.get('cookie')];
  if (!token) {
    next();
    return;
  }
  req.user = token;
  next();
});

// 注册api
require('./src/api')(app);

app.get('*', (req, res) => {
  if (!req.user && req.url !== '/login') {
    return res.status(401).redirect('/login');
  }

  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.');
  }

  res.setHeader('Content-Type', 'text/html');
  res.setHeader('Server', serverInfo);

  var s = Date.now();
  const context = { url: req.url };
  const renderStream = renderer.renderToStream(context);

  renderStream.once('data', () => {
    res.write(indexHTML.head);
  });

  renderStream.on('data', chunk => {
    res.write(chunk);
  });

  renderStream.on('end', () => {
    // embed initial store state
    if (context.initialState) {
      res.write(
        `<script>window.__INITIAL_STATE__=${
          serialize(context.initialState, { isJSON: true })
        }</script>`
      );
    }
    res.end(indexHTML.tail);
    console.log(`whole request: ${Date.now() - s}ms`);
  });

  renderStream.on('error', err => {
    if (err && err.code === '404') {
      res.status(404).end('404 | Page Not Found');
      return;
    }
    // Render Error Page or Redirect
    res.status(500).end('Internal Error 500');
    console.error(`error during render : ${req.url}`);
    console.error(err);
  });
});

const port = process.env.PORT || config.get('port') || 8080;

app.listen(port, () => {
  console.log(`server started at localhost:${port}`);
});
